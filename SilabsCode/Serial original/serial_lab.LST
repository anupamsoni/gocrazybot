C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE SERIAL_LAB
OBJECT MODULE PLACED IN serial_lab.OBJ
COMPILER INVOKED BY: C:\SiLabs\MCU\IDEfiles\C51\BIN\C51.exe serial_lab.c DB OE

line level    source

   1          //-- This program makes the LED at P1.6 blink at different
   2          // speeds (SerialComm.C)
   3          //-- Uses Timer 3 and interrupts for the blinking frequency
   4          //-- Uses the external crystal oscillator 22.11845 MHz
   5          //-- Receives commands from PC to change the blinking speed
   6          //-- Timer 1 is used to generate Baud rate for UART0
   7          #include <c8051f020.h>
   8          #include <stdio.h>
   9          #include <stdlib.h>
  10          
  11          
  12          //--------------------------------------------------------------
  13          // 16-bit SFR Definitions for 'F02x
  14          //--------------------------------------------------------------
  15          sfr16 TMR3RL = 0x92; // Timer3 reload value
  16          sfr16 TMR3 = 0x94; // Timer3 counter
  17          //--------------------------------------------------------------// Global CONSTANTS
  18          //--------------------------------------------------------------
  19          #define BLINKCLK 2000000
  20          sbit LED = P1^6;
  21          sbit DIR = P1^0;
  22          unsigned char LED_count;
  23          unsigned char blink_speed;
  24          unsigned int received_byte;
  25          unsigned int sent_byte;
  26          unsigned int command;
  27          unsigned int message;
  28          unsigned int port5;
  29          unsigned int outBuffer[4];
  30          int i, count, random;
  31          int pulse;
  32          
  33          unsigned short new_cmd_received; //-- set each time new
  34          unsigned short new_cmd_sent;
  35          int transmitFlag;
  36          int prevTransmitFlag;
  37          
  38          // command is received
  39          //-- function prototypes ---------------------------------------void Init_Clock(void); //-- initialize the
             - clock to use external
  40          // crystal oscillator
  41          void Init_Port(void); //-- Configures the Crossbar and GPIO
  42          // ports
  43          void Init_UART0(void); //-- configure and initialize the UART0
  44          // serial comm
  45          void Init_Timer3(unsigned int counts);
  46          void Timer3_ISR(void); //-- ISR for Timer 3
  47          void UART0_ISR(void); //-- ISR for UART0
  48          void Init_ADC0          (void);                 //-- Initialise the ADC0
  49          void ADC0_ISR       (void);
  50          void INT1_ISR (void);
  51          //--------------------------------------------------------------
  52          
  53          #define LCD_DAT_PORT  P6                  // LCD is in 8 bit mode
  54          #define LCD_CTRL_PORT P7                  // 3 control pins on P7
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 2   

  55          #define RS_MASK       0x01                // for assessing LCD_CTRL_PORT
  56          #define RW_MASK       0x02
  57          #define E_MASK        0x04
  58          
  59          //---------------------------------------------------------------------------------
  60          // Global MACROS
  61          //---------------------------------------------------------------------------------
  62          #define pulse_E();\
  63                  small_delay(1);\
  64                  LCD_CTRL_PORT = LCD_CTRL_PORT | E_MASK;\
  65                  small_delay(1);\
  66                  LCD_CTRL_PORT = LCD_CTRL_PORT & ~E_MASK;\
  67          
  68          //---------------------------------------------------------------------------------
  69          
  70          
  71          //-- LCD related functions ----------
  72          void lcd_init       (void);          // initialize the lcd to 8 bit mode
  73          void lcd_busy_wait  (void);          // wait until the lcd is no longer busy
  74          char putchar        (char c);        // replaces standard function and uses LCD
  75          void lcd_cmd        (char cmd);      // write a command to the lcd controller
  76          void lcd_home       (void);          // home curser
  77          void lcd_clear      (void);          // clear display
  78          void lcd_goto       (char addr);    // move to address addr
  79          void lcd_move_curser(char dist);     // moves curser forward or back by dist
  80          void lcd_curser     (bit on);        // 1 displays curser, 0 hides it
  81          void lcd_puts       (char string[]); // send string to lcd at current curser loc
  82          void small_delay    (char d);   // 8 bit,  about 0.34us per count @22.1MHz
  83          void large_delay    (char d);   // 16 bit, about 82us   per count @22.1MHz
  84          void huge_delay     (char d);   // 24 bit, about 22ms   per count @22.1MHz
  85          
  86          
  87          
  88          void Init_Clock(void)
  89          {
  90   1                      OSCXCN = 0x67; //-- 0110 0111b
  91   1                      //-- External Osc Freq Control Bits (XFCN2-0) set to 111
  92   1                      // because crystal frequency > 6.7 MHz
  93   1                      //-- Crystal Oscillator Mode (XOSCMD2-0) set to 110
  94   1                      //-- wait till XTLVLD pin is set
  95   1                      while ( !(OSCXCN & 0x80) );
  96   1                      OSCICN = 0x88; //-- 1000 1000b
  97   1                      //-- Bit 2 : Internal Osc. disabled (IOSCEN = 0)
  98   1                      //-- Bit 3 : Uses External Oscillator as System Clock
  99   1                      // (CLKSL = 1)
 100   1                      //-- Bit 7 : Missing Clock Detector Enabled (MSCLKE = 1)
 101   1      }
 102          
 103          void Init_Port(void) //-- Configures the Crossbar & GPIO ports
 104          {
 105   1                      XBR0 = 0x04; //-- Enable UART0
 106   1                      XBR1 = 0x00;
 107   1                      XBR2 = 0x40; //-- Enable Crossbar and weak pull-ups
 108   1                      // (globally)
 109   1                      P0MDOUT |= 0x01; //-- Enable TX0 as a push-pull o/p
 110   1                      P1MDOUT |= 0x4f; //-- Enable P1.6 (LED) as push-
 111   1                      // pull output
 112   1      
 113   1                                      //-- Port 7-4 I/O Lines
 114   1                      P74OUT = 0x48;                          // Output configuration for P4-7
 115   1                                                                              // (P7[0:3] Push Pull) - Control Lines for LCD
 116   1                                                                      // (P6 Open-Drain)- Data Lines for LCD
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 3   

 117   1                                                                      // (P5[7:4] Push Pull) - 4 LEDs
 118   1                                                                      // (P5[3:0] Open Drain) - 4 Push-Button Switches (input)
 119   1                                                                      // (P4 Open Drain) - 8 DIP Switches (input)
 120   1      
 121   1      
 122   1                      P5 |= 0x0F;
 123   1      
 124   1                      ES0 = 1;        //-- enable UART0 interrupt
 125   1              IT0 = 1;        //-- /INT0 is edge triggered
 126   1              IT1 = 1;        //-- /INT1 is edge triggered
 127   1              PT0 =1;         //-- High priority for Timer 0 (PWM generator)
 128   1              PT1 =1;         //-- High priority for Timer 1 (Tacho Counter)
 129   1              EX0 = 1;        //-- enable external interrupt 0 (/INT0)
 130   1              EX1 = 1;        //-- enable external interrupt 1 (/INT1)
 131   1              
 132   1      
 133   1      }
 134          
 135          
 136          void INT1_ISR (void) interrupt 2                                                
 137          {
 138   1              pulse++ ;
 139   1                                      
 140   1      
 141   1      }
 142          //--------------------------------------------------------------
 143          void Init_UART0(void)
 144          {
 145   1              //-- set up Timer 1 to generate the baude rate (115200) // for UART0
 146   1              CKCON |= 0x10; //-- T1M=1; Timer 1 uses the system clock
 147   1              // 22.11845 MHz
 148   1              TMOD = 0x20; //-- Timer 1 in Mode 2 (8-bit auto-
 149   1              // reload)
 150   1              TH1 = 0xF4; //-- Baud rate = 115200
 151   1              TR1 = 1; //-- start Timer 1 (TCON.6 = 1)
 152   1              T2CON &= 0xCF; //-- Timer 1 overflows used for receive & // transmit clock (RCLK0=0, TCLK0=0)
 153   1              //-- Set up the UART0
 154   1              PCON |= 0x80; //-- SMOD0=1 (UART0 baud rate divide-by-2
 155   1              // disabled)
 156   1              SCON0 = 0x50; //-- UART0 Mode 1, Logic level of stop
 157   1              
 158   1              // bit ignored and Receive enabled
 159   1              //-- enable UART0 interrupt
 160   1              IE |= 0x10;
 161   1              IP |= 0x10; //-- set to high priority level
 162   1              RI0= 0; //-- clear the receive interrupt flag;
 163   1      
 164   1              // ready to receive more
 165   1      }
 166          //--------------------------------------------------------------
 167          //-- Configure Timer3 to auto-reload and generate an interrupt // at interval specified by <counts> using 
             -SYSCLK/12 as its
 168          // time base.
 169          void Init_Timer3 (unsigned int counts)
 170          {
 171   1                      TMR3CN = 0x00; //-- Stop Timer3; Clear TF3;
 172   1                      //-- use SYSCLK/12 as time base
 173   1                      TMR3RL = -counts; //-- Init reload values
 174   1                      TMR3 = 0xffff; //-- set to reload immediately
 175   1                      EIE2 |= 0x01; //-- enable Timer3 interrupts
 176   1                      TMR3CN |= 0x04; //-- start Timer3 by setting TR3
 177   1                      // (TMR3CN.2) to 1
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 4   

 178   1      }
 179          
 180          //-- This routine changes the state of the LED whenever Timer3
 181          // overflows.
 182          void Timer3_ISR (void) interrupt 14
 183          {
 184   1                      TMR3CN &= ~(0x80); //-- clear TF3
 185   1                      LED_count++;
 186   1      
 187   1                      
 188   1                      
 189   1                              
 190   1                              
 191   1                              if ( (LED_count % 10) == 0) //-- do every 10th count
 192   1                              {
 193   2                                      if ( blink_speed==0)
 194   2                                      {
 195   3                                              LED=0;
 196   3                                      }
 197   2      
 198   2                                      else
 199   2                                      {
 200   3                                 
 201   3                                      LED = ~LED; //-- change state of LED
 202   3                                      LED_count = 0;
 203   3                                      }
 204   2                              }
 205   1                      
 206   1      }
 207          
 208          
 209          
 210          void Init_ADC0(void)
 211          {
 212   1              
 213   1          REF0CN = 0x03;      // Vref setup
 214   1          ADC0CF = 0x80;      // SAR0 Conversion, clock = 941 kHz approx, Gain = 1
 215   1      
 216   1          AMX0CF = 0x00;      // 8 single-ended inputs
 217   1          AMX0SL = 0x00;      // select AIN0 input
 218   1          ADC0CN = 0x80;      // enable ADC0, continuous tracking mode, 
 219   1                                              // conversion initiated on every write of "1" to AD0BUSY
 220   1                                              // and right justify data
 221   1      
 222   1          EIE2 = 0x02;        // enable ADC0 end of conversion interrupts
 223   1      
 224   1      }
 225          
 226          
 227          void ADC0_ISR(void) interrupt 15
 228          {
 229   1        
 230   1          ADC0CN = 0x91;      // enable ADC0, continuous tracking mode, ADC0 conversion is in progress 
 231   1                                              // conversion initiated on every write of "1" to AD0BUSY
 232   1                                              // and left justify data
 233   1      
 234   1               message = ADC0H;       // calc the ref_speed by using ADCO value
 235   1               message = message >>1; //make message to between 0 and 127
 236   1      
 237   1      
 238   1      }
 239          
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 5   

 240          
 241          //--------------------------------------------------------------
 242          void UART0_ISR(void) interrupt 4
 243          {
 244   1              
 245   1      
 246   1      
 247   1                      //-- pending flags RI0 (SCON0.0) and TI0(SCON0.1)
 248   1                      if  ( RI0 == 1) //-- interrupt caused by received byte
 249   1                      {
 250   2      
 251   2                              received_byte = SBUF0; //-- read the input buffer
 252   2                              RI0 = 0; //-- clear the flag
 253   2                              new_cmd_received=1;
 254   2              
 255   2                      }
 256   1            
 257   1                  
 258   1      
 259   1      
 260   1                   //START: buttons 1 and 2 together
 261   1      
 262   1                                if  ( P5 == 0x03) 
 263   1                                        {
 264   2                                            
 265   2                              lcd_clear();
 266   2                                              lcd_goto(0x00) ;   //-- go to first Row
 267   2                                                  printf("   Start   ");
 268   2                                                      lcd_goto(0x40);   //-- go to Second Row
 269   2                                                      printf("  but 2 & 3:  ");
 270   2      
 271   2      
 272   2                                                 //start
 273   2                                                      command = 0xCC; // DEC=204
 274   2                                        }
 275   1      
 276   1              
 277   1                       //STALL: buttons 3 and 4 together
 278   1      
 279   1                if ( (P5 == 0x0C)) 
 280   1                                        {
 281   2                                            
 282   2                              lcd_clear();
 283   2                                              lcd_goto(0x00) ;   //-- go to first Row
 284   2                                                  printf("   Stall   ");
 285   2                                                      lcd_goto(0x40);   //-- go to Second Row
 286   2                                                      printf(" but 3 & 4   ");
 287   2      
 288   2                                                      P5 &= 0x0F;
 289   2      
 290   2                                                 //stall
 291   2                                                      command = 0xDD;
 292   2                                        }
 293   1      
 294   1                       random = rand();
 295   1                       
 296   1                       random = random >> 8;
 297   1      
 298   1             //set output buffer
 299   1                  outBuffer[0] = command;
 300   1                      
 301   1                      outBuffer[1] = P5;
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 6   

 302   1                              outBuffer[2] = message;
 303   1                              outBuffer[3] = received_byte;
 304   1              
 305   1                      
 306   1                      for (count = 0; count <4 ; count++)
 307   1                               {
 308   2      
 309   2                                while(        TI0 ==0)
 310   2      
 311   2                                   {
 312   3                                                SBUF0 = outBuffer[count]; //-- send the sent_byte to output
 313   3                                                small_delay(100);
 314   3                                        
 315   3                                        }  
 316   2                                       
 317   2                 
 318   2                              TI0 = 0;
 319   2                         
 320   2                       }//for 
 321   1       
 322   1      
 323   1      }//UART0_ISR
 324          
 325          
 326          
 327          
 328          
 329          
 330          //--------------------------------------------------------------
 331          void main(void)
 332          {
 333   1                      blink_speed = 0;
 334   1                       
 335   1                      new_cmd_received = 0; 
 336   1                      port5=0;
 337   1                      command = 0;
 338   1                      message = 0;
 339   1                      i = 0;
 340   1                  count = 0;
 341   1                      random =0; 
 342   1      
 343   1              P5 = 0x0F;                      //-- Turn the 4 green LEDs off
 344   1                      P1 = 0x00;
 345   1      
 346   1                      LED_count = 0;
 347   1                      LED = 0;
 348   1                      DIR = 0;
 349   1                      EA = 0; //-- disable global interrupts
 350   1                      WDTCN = 0xDE; //-- disable watchdog timer
 351   1                      WDTCN = 0xAD;
 352   1                      Init_Clock();
 353   1                      lcd_init();
 354   1                  lcd_curser(0); 
 355   1                      Init_Port();
 356   1                      Init_ADC0();
 357   1      
 358   1                      Init_Timer3(BLINKCLK/12/blink_speed); Init_UART0();
 359   1                      AD0BUSY = 1;    // write 1 to ADC0BUSY and start ADC0 conversion 
 360   1                      EA = 1; //-- enable global interrupts
 361   1                              
 362   1                      
 363   1      
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 7   

 364   1                      while(1) //-- go on forever
 365   1                      {
 366   2                  if( i == 3000)
 367   2                              {
 368   3                                 i = -1;
 369   3                                 RI0 = 1;
 370   3                              
 371   3                              }
 372   2                              else
 373   2                             RI0 == 0;
*** WARNING C275 IN LINE 373 OF SERIAL_LAB.C: expression with possibly no effect
 374   2      
 375   2                      
 376   2             if ( blink_speed==0)
 377   2                                      {
 378   3                                              LED=0;
 379   3                                      }
 380   2      
 381   2                 if (new_cmd_received == 1)
 382   2                     {
 383   3                         
 384   3      
 385   3              
 386   3                                                                  switch (received_byte)
 387   3                                                                              {
 388   4                                                                              case 1: 
 389   4      
 390   4                                                                                  lcd_clear();
 391   4                                                                                      //-- Display
 392   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 393   4                                                                                  printf("  Left Slow"  );
 394   4                                                                                      huge_delay(20);
 395   4                                                                                      blink_speed = 1; 
 396   4                                                                                      DIR = 1;
 397   4                                                                                      break; // slow
 398   4      
 399   4                                                                              case 2: 
 400   4      
 401   4                                                                                       lcd_clear();
 402   4                                                                                      //-- Display
 403   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 404   4                                                                                  printf("  Left Medium " );
 405   4                                                                                      huge_delay(20);
 406   4                                                                                      blink_speed = 10; 
 407   4                                                                                      break; // medium
 408   4      
 409   4                                                                              case 3:
 410   4      
 411   4                                                                                      lcd_clear();
 412   4                                                                              //-- Display
 413   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 414   4                                                                                  printf("  Left Fast");
 415   4                                                                                      huge_delay(20);
 416   4                                                                                      blink_speed = 50;
 417   4                                                                                      break; // fast
 418   4      
 419   4                                                                              case 4: 
 420   4      
 421   4                                                                                  lcd_clear();
 422   4                                                                                      //-- Display
 423   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 424   4                                                                                  printf("  Right Slow"  );
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 8   

 425   4                                                                                      huge_delay(20);
 426   4                                                                                      blink_speed = 1; 
 427   4                                                                                      break; // slow
 428   4      
 429   4                                                                              case 5: 
 430   4      
 431   4                                                                                       lcd_clear();
 432   4                                                                                      //-- Display
 433   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 434   4                                                                                  printf("  Right Medium " );
 435   4                                                                                      huge_delay(20);
 436   4                                                                                      blink_speed = 10; 
 437   4                                                                                      break; // medium
 438   4      
 439   4                                                                              case 6:
 440   4      
 441   4                                                                                      lcd_clear();
 442   4                                                                              //-- Display
 443   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 444   4                                                                                  printf("  Right Fast");
 445   4                                                                                      huge_delay(20);
 446   4                                                                                      blink_speed = 50;
 447   4                                                                                      break; // fast
 448   4      
 449   4                                                                              case 7:
 450   4      
 451   4                                                                                      lcd_clear();
 452   4                                                                              //-- Display
 453   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 454   4                                                                                  printf("  Stop");
 455   4                                                                                      huge_delay(20);
 456   4                                                                                      blink_speed = 0;
 457   4                                                                                      break; // fast
 458   4      
 459   4                                                                      
 460   4                                                                              
 461   4                                                                              default : blink_speed = 0; break;
 462   4                                                                      }
 463   3                                                                      EA = 0; Init_Timer3(BLINKCLK/12/blink_speed);
 464   3                                                                      EA = 1; //-- enable interrupts
 465   3                                                                      new_cmd_received = 0;
 466   3      
 467   3                                                      }//if
 468   2      
 469   2      
 470   2                                    
 471   2      
 472   2                   i++;
 473   2      
 474   2                                
 475   2                                      
 476   2      
 477   2                              }//while
 478   1      
 479   1                              
 480   1      
 481   1      }//main
 482          
 483          
 484          
 485          //------------------- LCD functions -----------------------------------------------
 486          #pragma OPTIMIZE (7)
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 9   

 487          
 488          void lcd_init(void)
 489          {
 490   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RS_MASK;       // RS = 0
 491   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RW_MASK;       // RW = 0
 492   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~E_MASK;        //  E = 0
 493   1              large_delay(200);                                 // 16ms delaISR
 494   1              LCD_DAT_PORT = 0x38;                      // set 8-bit mode
 495   1              pulse_E();
 496   1              large_delay(50);                                  // 4.1ms delay
 497   1      
 498   1              LCD_DAT_PORT = 0x38;                      // set 8-bit mode
 499   1              pulse_E();
 500   1              large_delay(2);                           // 1.5ms delay
 501   1      
 502   1              LCD_DAT_PORT = 0x38;                      // set 8-bit mode
 503   1              pulse_E();
 504   1              large_delay(2);                           // 1.5ms delay
 505   1      
 506   1              lcd_cmd(0x06);                                    // curser moves right
 507   1              lcd_cmd(0x01);                                    // clear display
 508   1              lcd_cmd(0x0E);                                    // display and curser on
 509   1      }
 510          
 511          
 512          #pragma OPTIMIZE (9)
 513          
 514          //---------------------------------------------------------------------------------
 515          // lcd_busy_wait
 516          //---------------------------------------------------------------------------------
 517          //
 518          // wait for the busy bit to drop
 519          //
 520          void lcd_busy_wait(void)
 521          {
 522   1              LCD_DAT_PORT = 0xFF;
 523   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RS_MASK;       // RS = 0
 524   1              LCD_CTRL_PORT = LCD_CTRL_PORT | RW_MASK;        // RW = 1
 525   1              small_delay(1);
 526   1              LCD_CTRL_PORT = LCD_CTRL_PORT | E_MASK; //  E = 1
 527   1      //      TB_GREEN_LED = 1;
 528   1              do
 529   1              {                                                                 // wait for busy flag to drop
 530   2                      small_delay(1);
 531   2              } while ((LCD_DAT_PORT & 0x80) != 0);
 532   1      //      TB_GREEN_LED = 0;
 533   1      }
 534          
 535          
 536          //---------------------------------------------------------------------------------
 537          // lcd_dat (putchar)
 538          //---------------------------------------------------------------------------------
 539          //
 540          // write a character to the lcd screen
 541          //
 542          char putchar(char dat)
 543          {
 544   1              lcd_busy_wait();
 545   1              LCD_CTRL_PORT = LCD_CTRL_PORT | RS_MASK;        // RS = 1
 546   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RW_MASK;       // RW = 0
 547   1              LCD_DAT_PORT = dat;
 548   1              pulse_E();
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 10  

 549   1              return 1;
 550   1      
 551   1      }
 552          
 553          
 554          //---------------------------------------------------------------------------------
 555          // lcd_cmd
 556          //---------------------------------------------------------------------------------
 557          //
 558          // write a command to the lcd controller
 559          //
 560          void lcd_cmd(char cmd)
 561          {
 562   1              lcd_busy_wait();
 563   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RS_MASK;       // RS = 0
 564   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RW_MASK;       // RW = 0
 565   1              LCD_DAT_PORT = cmd;
 566   1              pulse_E();
 567   1      
 568   1      }
 569          
 570          
 571          //---------------------------------------------------------------------------------
 572          // lcd_goto
 573          //---------------------------------------------------------------------------------
 574          //
 575          // change the text entry point
 576          //
 577          void lcd_goto(char addr)
 578          {
 579   1              lcd_cmd(addr | 0x80);
 580   1      }
 581          
 582          //---------------------------------------------------------------------------------
 583          // lcd_clear
 584          //---------------------------------------------------------------------------------
 585          void lcd_clear(void)
 586          {
 587   1              lcd_cmd(0x01);  //-- clear LCD display
 588   1              lcd_cmd(0x80);  //-- curser go to 0x00
 589   1      }
 590          
 591          //---------------------------------------------------------------------------------
 592          // lcd_curser
 593          //---------------------------------------------------------------------------------
 594          void lcd_curser(bit on)        // 1 displays curser, 0 hides it
 595          {
 596   1              if (on)
 597   1                      lcd_cmd(0x0E);  
 598   1              else
 599   1                      lcd_cmd(0x0C);
 600   1      }
 601          
 602          
 603          //---------------------------------------------------------------------------------
 604          // delay routines
 605          //---------------------------------------------------------------------------------
 606          
 607          void small_delay(char d)
 608          {
 609   1              while (d--);
 610   1      }
C51 COMPILER V8.08   SERIAL_LAB                                                            05/21/2009 13:30:25 PAGE 11  

 611          
 612          
 613          void large_delay(char d)
 614          {
 615   1              while (d--)
 616   1                      small_delay(255);
 617   1      }
 618          
 619          
 620          void huge_delay(char d)
 621          {
 622   1              while (d--)
 623   1                      large_delay(255);
 624   1      }
 625          
 626          //------------------- End Of File ---------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1119    ----
   CONSTANT SIZE    =    141    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
