C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE SERIAL_LAB
OBJECT MODULE PLACED IN serial_lab.OBJ
COMPILER INVOKED BY: C:\SiLabs\MCU\IDEfiles\C51\BIN\C51.exe serial_lab.c DB OE

line level    source

   1          //-- This program makes the LED at P1.6 blink at different
   2          // speeds (SerialComm.C)
   3          //-- Uses Timer 3 and interrupts for the blinking frequency
   4          //-- Uses the external crystal oscillator 22.11845 MHz
   5          //-- Receives commands from PC to change the blinking speed
   6          //-- Timer 1 is used to generate Baud rate for UART0
   7          #include <c8051f020.h>
   8          #include <stdio.h>
   9          #include <stdlib.h>
  10          
  11          
  12          //--------------------------------------------------------------
  13          // 16-bit SFR Definitions for 'F02x
  14          //--------------------------------------------------------------
  15          sfr16 TMR3RL = 0x92; // Timer3 reload value
  16          sfr16 TMR3 = 0x94; // Timer3 counter
  17          //--------------------------------------------------------------// Global CONSTANTS
  18          //--------------------------------------------------------------
  19          #define BLINKCLK 2000000
  20          sbit LED = P1^6;
  21          sbit DIR = P1^0;
  22          unsigned char LED_count;
  23          unsigned char blink_speed;
  24          unsigned int received_byte;
  25          unsigned int sent_byte;
  26          unsigned int command;
  27          unsigned int message;
  28          unsigned int port5;
  29          unsigned int outBuffer[4];
  30          int i, count, random;
  31          
  32          unsigned short new_cmd_received; //-- set each time new
  33          unsigned short new_cmd_sent;
  34          int transmitFlag;
  35          int prevTransmitFlag;
  36          
  37          // command is received
  38          //-- function prototypes ---------------------------------------void Init_Clock(void); //-- initialize the
             - clock to use external
  39          // crystal oscillator
  40          void Init_Port(void); //-- Configures the Crossbar and GPIO
  41          // ports
  42          void Init_UART0(void); //-- configure and initialize the UART0
  43          // serial comm
  44          void Init_Timer0(unsigned char reload0);
  45          void Init_Timer3(unsigned int counts);
  46          void Timer3_ISR(void); //-- ISR for Timer 3
  47          void UART0_ISR(void); //-- ISR for UART0
  48          void Timer0_ISR(void);
  49          void Init_ADC0          (void);                 //-- Initialise the ADC0
  50          void ADC0_ISR       (void);
  51          
  52          //--------------------------------------------------------------
  53          
  54          #define LCD_DAT_PORT  P6                  // LCD is in 8 bit mode
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 2   

  55          #define LCD_CTRL_PORT P7                  // 3 control pins on P7
  56          #define RS_MASK       0x01                // for assessing LCD_CTRL_PORT
  57          #define RW_MASK       0x02
  58          #define E_MASK        0x04
  59          
  60          //---------------------------------------------------------------------------------
  61          // Global MACROS
  62          //---------------------------------------------------------------------------------
  63          #define pulse_E();\
  64                  small_delay(1);\
  65                  LCD_CTRL_PORT = LCD_CTRL_PORT | E_MASK;\
  66                  small_delay(1);\
  67                  LCD_CTRL_PORT = LCD_CTRL_PORT & ~E_MASK;\
  68          
  69          //---------------------------------------------------------------------------------
  70          
  71          
  72          //-- LCD related functions ----------
  73          void lcd_init       (void);          // initialize the lcd to 8 bit mode
  74          void lcd_busy_wait  (void);          // wait until the lcd is no longer busy
  75          char putchar        (char c);        // replaces standard function and uses LCD
  76          void lcd_cmd        (char cmd);      // write a command to the lcd controller
  77          void lcd_home       (void);          // home curser
  78          void lcd_clear      (void);          // clear display
  79          void lcd_goto       (char addr);    // move to address addr
  80          void lcd_move_curser(char dist);     // moves curser forward or back by dist
  81          void lcd_curser     (bit on);        // 1 displays curser, 0 hides it
  82          void lcd_puts       (char string[]); // send string to lcd at current curser loc
  83          void small_delay    (char d);   // 8 bit,  about 0.34us per count @22.1MHz
  84          void large_delay    (char d);   // 16 bit, about 82us   per count @22.1MHz
  85          void huge_delay     (char d);   // 24 bit, about 22ms   per count @22.1MHz
  86          
  87          
  88          
  89          void Init_Clock(void)
  90          {
  91   1                      OSCXCN = 0x67; //-- 0110 0111b
  92   1                      //-- External Osc Freq Control Bits (XFCN2-0) set to 111
  93   1                      // because crystal frequency > 6.7 MHz
  94   1                      //-- Crystal Oscillator Mode (XOSCMD2-0) set to 110
  95   1                      //-- wait till XTLVLD pin is set
  96   1                      while ( !(OSCXCN & 0x80) );
  97   1                      OSCICN = 0x88; //-- 1000 1000b
  98   1                      //-- Bit 2 : Internal Osc. disabled (IOSCEN = 0)
  99   1                      //-- Bit 3 : Uses External Oscillator as System Clock
 100   1                      // (CLKSL = 1)
 101   1                      //-- Bit 7 : Missing Clock Detector Enabled (MSCLKE = 1)
 102   1      }
 103          
 104          void Init_Port(void) //-- Configures the Crossbar & GPIO ports
 105          {
 106   1                      XBR0 = 0x04; //-- Enable UART0
 107   1                      XBR1 = 0x00;
 108   1                      XBR2 = 0x40; //-- Enable Crossbar and weak pull-ups
 109   1                      // (globally)
 110   1                      P0MDOUT |= 0x01; //-- Enable TX0 as a push-pull o/p
 111   1                      P1MDOUT |= 0x4f; //-- Enable P1.6 (LED) as push-
 112   1                      // pull output
 113   1      
 114   1                                      //-- Port 7-4 I/O Lines
 115   1                      P74OUT = 0x48;                          // Output configuration for P4-7
 116   1                                                                              // (P7[0:3] Push Pull) - Control Lines for LCD
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 3   

 117   1                                                                      // (P6 Open-Drain)- Data Lines for LCD
 118   1                                                                      // (P5[7:4] Push Pull) - 4 LEDs
 119   1                                                                      // (P5[3:0] Open Drain) - 4 Push-Button Switches (input)
 120   1                                                                      // (P4 Open Drain) - 8 DIP Switches (input)
 121   1      
 122   1      
 123   1                      P5 |= 0x0F;
 124   1      
 125   1      }
 126          //--------------------------------------------------------------
 127          void Init_UART0(void)
 128          {
 129   1              //-- set up Timer 1 to generate the baude rate (115200) // for UART0
 130   1              CKCON |= 0x10; //-- T1M=1; Timer 1 uses the system clock
 131   1              // 22.11845 MHz
 132   1              TMOD = 0x20; //-- Timer 1 in Mode 2 (8-bit auto-
 133   1              // reload)
 134   1              TH1 = 0xF4; //-- Baud rate = 115200
 135   1              TR1 = 1; //-- start Timer 1 (TCON.6 = 1)
 136   1              T2CON &= 0xCF; //-- Timer 1 overflows used for receive & // transmit clock (RCLK0=0, TCLK0=0)
 137   1              //-- Set up the UART0
 138   1              PCON |= 0x80; //-- SMOD0=1 (UART0 baud rate divide-by-2
 139   1              // disabled)
 140   1              SCON0 = 0x50; //-- UART0 Mode 1, Logic level of stop
 141   1              
 142   1              // bit ignored and Receive enabled
 143   1              //-- enable UART0 interrupt
 144   1              IE |= 0x10;
 145   1              IP |= 0x10; //-- set to high priority level
 146   1              RI0= 0; //-- clear the receive interrupt flag;
 147   1      
 148   1              // ready to receive more
 149   1      }
 150          
 151          void Init_Timer0(unsigned char reload0)
 152          {
 153   1              CKCON = 0x00;           //-- Timer0 uses SYSCLK/12
 154   1              TMOD  = 0x22;           //-- Set Timer0 in 8 Bit Auto-Reload Mode
 155   1              TH0   = reload0;        //-- Set Timer0 Reload Value
 156   1              TL0   = TH0;
 157   1              TCON  = 0x14;           //-- Enable Timer0 Interrupt
 158   1              IE    = 0x06;           //-- Start Timer0
 159   1      }
 160          
 161          void Timer0_ISR(void)
 162          {
 163   1              TF0 = 0;
 164   1              Encoder_Count++;
*** ERROR C202 IN LINE 164 OF SERIAL_LAB.C: 'Encoder_Count': undefined identifier
 165   1      }
 166          
 167          //--------------------------------------------------------------
 168          //-- Configure Timer3 to auto-reload and generate an interrupt // at interval specified by <counts> using 
             -SYSCLK/12 as its
 169          // time base.
 170          void Init_Timer3 (unsigned int counts)
 171          {
 172   1                      TMR3CN = 0x00; //-- Stop Timer3; Clear TF3;
 173   1                      //-- use SYSCLK/12 as time base
 174   1                      TMR3RL = -counts; //-- Init reload values
 175   1                      TMR3 = 0xffff; //-- set to reload immediately
 176   1                      EIE2 |= 0x01; //-- enable Timer3 interrupts
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 4   

 177   1                      TMR3CN |= 0x04; //-- start Timer3 by setting TR3
 178   1                      // (TMR3CN.2) to 1
 179   1      }
 180          
 181          //-- This routine changes the state of the LED whenever Timer3
 182          // overflows.
 183          void Timer3_ISR (void) interrupt 14
 184          {
 185   1                      TMR3CN &= ~(0x80); //-- clear TF3
 186   1                      LED_count++;
 187   1      
 188   1                      
 189   1                      
 190   1                              
 191   1                              
 192   1                              if ( (LED_count % 10) == 0) //-- do every 10th count
 193   1                              {
 194   2                                      if ( blink_speed==0)
 195   2                                      {
 196   3                                              LED=0;
 197   3                                      }
 198   2      
 199   2                                      else
 200   2                                      {
 201   3                                 
 202   3                                      LED = ~LED; //-- change state of LED
 203   3                                      LED_count = 0;
 204   3                                      }
 205   2                              }
 206   1                      
 207   1      }
 208          
 209          
 210          
 211          void Init_ADC0(void)
 212          {
 213   1              
 214   1          REF0CN = 0x03;      // Vref setup
 215   1          ADC0CF = 0x80;      // SAR0 Conversion, clock = 941 kHz approx, Gain = 1
 216   1      
 217   1          AMX0CF = 0x00;      // 8 single-ended inputs
 218   1          AMX0SL = 0x00;      // select AIN0 input
 219   1          ADC0CN = 0x80;      // enable ADC0, continuous tracking mode, 
 220   1                                              // conversion initiated on every write of "1" to AD0BUSY
 221   1                                              // and right justify data
 222   1      
 223   1          EIE2 = 0x02;        // enable ADC0 end of conversion interrupts
 224   1      
 225   1      }
 226          
 227          
 228          void ADC0_ISR(void) interrupt 15
 229          {
 230   1        
 231   1          ADC0CN = 0x91;      // enable ADC0, continuous tracking mode, ADC0 conversion is in progress 
 232   1                                              // conversion initiated on every write of "1" to AD0BUSY
 233   1                                              // and left justify data
 234   1      
 235   1               message = ADC0H;       // calc the ref_speed by using ADCO value
 236   1               message = message >>1; //make message to between 0 and 127
 237   1      
 238   1      
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 5   

 239   1      }
 240          
 241          
 242          //--------------------------------------------------------------
 243          void UART0_ISR(void) interrupt 4
 244          {
 245   1              
 246   1      
 247   1      
 248   1                      //-- pending flags RI0 (SCON0.0) and TI0(SCON0.1)
 249   1                      if  ( RI0 == 1) //-- interrupt caused by received byte
 250   1                      {
 251   2      
 252   2                              received_byte = SBUF0; //-- read the input buffer
 253   2                              RI0 = 0; //-- clear the flag
 254   2                              new_cmd_received=1;
 255   2              
 256   2                      }
 257   1            
 258   1                  
 259   1      
 260   1      
 261   1                   //START: buttons 1 and 2 together
 262   1      
 263   1                                if  ( P5 == 0x03) 
 264   1                                        {
 265   2                                            
 266   2                              lcd_clear();
 267   2                                              lcd_goto(0x00) ;   //-- go to first Row
 268   2                                                  printf("   Start   ");
 269   2                                                      lcd_goto(0x40);   //-- go to Second Row
 270   2                                                      printf("  but 2 & 3:  ");
 271   2      
 272   2      
 273   2                                                 //start
 274   2                                                      command = 0xCC; // DEC=204
 275   2                                        }
 276   1      
 277   1              
 278   1                       //STALL: buttons 3 and 4 together
 279   1      
 280   1                if ( (P5 == 0x0C)) 
 281   1                                        {
 282   2                                            
 283   2                              lcd_clear();
 284   2                                              lcd_goto(0x00) ;   //-- go to first Row
 285   2                                                  printf("   Stall   ");
 286   2                                                      lcd_goto(0x40);   //-- go to Second Row
 287   2                                                      printf(" but 3 & 4   ");
 288   2      
 289   2                                                      P5 &= 0x0F;
 290   2      
 291   2                                                 //stall
 292   2                                                      command = 0xDD;
 293   2                                        }
 294   1      
 295   1                       random = rand();
 296   1                       
 297   1                       random = random >> 8;
 298   1      
 299   1             //set output buffer
 300   1                  outBuffer[0] = command;
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 6   

 301   1                      
 302   1                      outBuffer[1] = P5;
 303   1                              outBuffer[2] = message;
 304   1                              outBuffer[3] = received_byte;
 305   1              
 306   1                      
 307   1                      for (count = 0; count <4 ; count++)
 308   1                               {
 309   2      
 310   2                                while(        TI0 ==0)
 311   2      
 312   2                                   {
 313   3                                                SBUF0 = outBuffer[count]; //-- send the sent_byte to output
 314   3                                                small_delay(100);
 315   3                                        
 316   3                                        }  
 317   2                                       
 318   2                 
 319   2                              TI0 = 0;
 320   2                         
 321   2                       }//for 
 322   1       
 323   1      
 324   1      }//UART0_ISR
 325          
 326          
 327          
 328          
 329          
 330          
 331          //--------------------------------------------------------------
 332          void main(void)
 333          {
 334   1                      blink_speed = 0;
 335   1                       
 336   1                      new_cmd_received = 0; 
 337   1                      port5=0;
 338   1                      command = 0;
 339   1                      message = 0;
 340   1                      i = 0;
 341   1                  count = 0;
 342   1                      random =0; 
 343   1      
 344   1              P5 = 0x0F;                      //-- Turn the 4 green LEDs off
 345   1                      P1 = 0x00;
 346   1      
 347   1                      LED_count = 0;
 348   1                      LED = 0;
 349   1                      DIR = 0;
 350   1                      EA = 0; //-- disable global interrupts
 351   1                      WDTCN = 0xDE; //-- disable watchdog timer
 352   1                      WDTCN = 0xAD;
 353   1                      Init_Clock();
 354   1                      lcd_init();
 355   1                  lcd_curser(0); 
 356   1                      Init_Port();
 357   1                      Init_ADC0();
 358   1      
 359   1                      Init_Timer3(BLINKCLK/12/blink_speed); Init_UART0();
 360   1                      AD0BUSY = 1;    // write 1 to ADC0BUSY and start ADC0 conversion 
 361   1                      EA = 1; //-- enable global interrupts
 362   1                              
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 7   

 363   1                      
 364   1      
 365   1                      while(1) //-- go on forever
 366   1                      {
 367   2                  if( i == 3000)
 368   2                              {
 369   3                                 i = -1;
 370   3                                 RI0 = 1;
 371   3                              
 372   3                              }
 373   2                              else
 374   2                             RI0 == 0;
 375   2      
 376   2                      
 377   2             if ( blink_speed==0)
 378   2                                      {
 379   3                                              LED=0;
 380   3                                      }
 381   2      
 382   2                 if (new_cmd_received == 1)
 383   2                     {
 384   3                         
 385   3      
 386   3              
 387   3                                                                  switch (received_byte)
 388   3                                                                              {
 389   4                                                                              case 1: 
 390   4      
 391   4                                                                                  lcd_clear();
 392   4                                                                                      //-- Display
 393   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 394   4                                                                                  printf("  Left Slow"  );
 395   4                                                                                      huge_delay(20);
 396   4                                                                                      blink_speed = 1; 
 397   4                                                                                      DIR = 1;
 398   4                                                                                      break; // slow
 399   4      
 400   4                                                                              case 2: 
 401   4      
 402   4                                                                                       lcd_clear();
 403   4                                                                                      //-- Display
 404   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 405   4                                                                                  printf("  Left Medium " );
 406   4                                                                                      huge_delay(20);
 407   4                                                                                      blink_speed = 10; 
 408   4                                                                                      break; // medium
 409   4      
 410   4                                                                              case 3:
 411   4      
 412   4                                                                                      lcd_clear();
 413   4                                                                              //-- Display
 414   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 415   4                                                                                  printf("  Left Fast");
 416   4                                                                                      huge_delay(20);
 417   4                                                                                      blink_speed = 50;
 418   4                                                                                      break; // fast
 419   4      
 420   4                                                                              case 4: 
 421   4      
 422   4                                                                                  lcd_clear();
 423   4                                                                                      //-- Display
 424   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 8   

 425   4                                                                                  printf("  Right Slow"  );
 426   4                                                                                      huge_delay(20);
 427   4                                                                                      blink_speed = 1; 
 428   4                                                                                      break; // slow
 429   4      
 430   4                                                                              case 5: 
 431   4      
 432   4                                                                                       lcd_clear();
 433   4                                                                                      //-- Display
 434   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 435   4                                                                                  printf("  Right Medium " );
 436   4                                                                                      huge_delay(20);
 437   4                                                                                      blink_speed = 10; 
 438   4                                                                                      break; // medium
 439   4      
 440   4                                                                              case 6:
 441   4      
 442   4                                                                                      lcd_clear();
 443   4                                                                              //-- Display
 444   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 445   4                                                                                  printf("  Right Fast");
 446   4                                                                                      huge_delay(20);
 447   4                                                                                      blink_speed = 50;
 448   4                                                                                      break; // fast
 449   4      
 450   4                                                                              case 7:
 451   4      
 452   4                                                                                      lcd_clear();
 453   4                                                                              //-- Display
 454   4                                                                                      lcd_goto(0x00) ;   //-- go to first Row
 455   4                                                                                  printf("  Stop");
 456   4                                                                                      huge_delay(20);
 457   4                                                                                      blink_speed = 0;
 458   4                                                                                      break; // fast
 459   4      
 460   4                                                                      
 461   4                                                                              
 462   4                                                                              default : blink_speed = 0; break;
 463   4                                                                      }
 464   3                                                                      EA = 0; Init_Timer3(BLINKCLK/12/blink_speed);
 465   3                                                                      EA = 1; //-- enable interrupts
 466   3                                                                      new_cmd_received = 0;
 467   3      
 468   3                                                      }//if
 469   2      
 470   2      
 471   2                                    
 472   2      
 473   2                   i++;
 474   2      
 475   2                                
 476   2                                      
 477   2      
 478   2                              }//while
 479   1      
 480   1                              
 481   1      
 482   1      }//main
 483          
 484          
 485          
 486          //------------------- LCD functions -----------------------------------------------
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 9   

 487          #pragma OPTIMIZE (7)
 488          
 489          void lcd_init(void)
 490          {
 491   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RS_MASK;       // RS = 0
 492   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RW_MASK;       // RW = 0
 493   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~E_MASK;        //  E = 0
 494   1              large_delay(200);                                 // 16ms delaISR
 495   1              LCD_DAT_PORT = 0x38;                      // set 8-bit mode
 496   1              pulse_E();
 497   1              large_delay(50);                                  // 4.1ms delay
 498   1      
 499   1              LCD_DAT_PORT = 0x38;                      // set 8-bit mode
 500   1              pulse_E();
 501   1              large_delay(2);                           // 1.5ms delay
 502   1      
 503   1              LCD_DAT_PORT = 0x38;                      // set 8-bit mode
 504   1              pulse_E();
 505   1              large_delay(2);                           // 1.5ms delay
 506   1      
 507   1              lcd_cmd(0x06);                                    // curser moves right
 508   1              lcd_cmd(0x01);                                    // clear display
 509   1              lcd_cmd(0x0E);                                    // display and curser on
 510   1      }
 511          
 512          
 513          #pragma OPTIMIZE (9)
 514          
 515          //---------------------------------------------------------------------------------
 516          // lcd_busy_wait
 517          //---------------------------------------------------------------------------------
 518          //
 519          // wait for the busy bit to drop
 520          //
 521          void lcd_busy_wait(void)
 522          {
 523   1              LCD_DAT_PORT = 0xFF;
 524   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RS_MASK;       // RS = 0
 525   1              LCD_CTRL_PORT = LCD_CTRL_PORT | RW_MASK;        // RW = 1
 526   1              small_delay(1);
 527   1              LCD_CTRL_PORT = LCD_CTRL_PORT | E_MASK; //  E = 1
 528   1      //      TB_GREEN_LED = 1;
 529   1              do
 530   1              {                                                                 // wait for busy flag to drop
 531   2                      small_delay(1);
 532   2              } while ((LCD_DAT_PORT & 0x80) != 0);
 533   1      //      TB_GREEN_LED = 0;
 534   1      }
 535          
 536          
 537          //---------------------------------------------------------------------------------
 538          // lcd_dat (putchar)
 539          //---------------------------------------------------------------------------------
 540          //
 541          // write a character to the lcd screen
 542          //
 543          char putchar(char dat)
 544          {
 545   1              lcd_busy_wait();
 546   1              LCD_CTRL_PORT = LCD_CTRL_PORT | RS_MASK;        // RS = 1
 547   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RW_MASK;       // RW = 0
 548   1              LCD_DAT_PORT = dat;
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 10  

 549   1              pulse_E();
 550   1              return 1;
 551   1      
 552   1      }
 553          
 554          
 555          //---------------------------------------------------------------------------------
 556          // lcd_cmd
 557          //---------------------------------------------------------------------------------
 558          //
 559          // write a command to the lcd controller
 560          //
 561          void lcd_cmd(char cmd)
 562          {
 563   1              lcd_busy_wait();
 564   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RS_MASK;       // RS = 0
 565   1              LCD_CTRL_PORT = LCD_CTRL_PORT & ~RW_MASK;       // RW = 0
 566   1              LCD_DAT_PORT = cmd;
 567   1              pulse_E();
 568   1      
 569   1      }
 570          
 571          
 572          //---------------------------------------------------------------------------------
 573          // lcd_goto
 574          //---------------------------------------------------------------------------------
 575          //
 576          // change the text entry point
 577          //
 578          void lcd_goto(char addr)
 579          {
 580   1              lcd_cmd(addr | 0x80);
 581   1      }
 582          
 583          //---------------------------------------------------------------------------------
 584          // lcd_clear
 585          //---------------------------------------------------------------------------------
 586          void lcd_clear(void)
 587          {
 588   1              lcd_cmd(0x01);  //-- clear LCD display
 589   1              lcd_cmd(0x80);  //-- curser go to 0x00
 590   1      }
 591          
 592          //---------------------------------------------------------------------------------
 593          // lcd_curser
 594          //---------------------------------------------------------------------------------
 595          void lcd_curser(bit on)        // 1 displays curser, 0 hides it
 596          {
 597   1              if (on)
 598   1                      lcd_cmd(0x0E);  
 599   1              else
 600   1                      lcd_cmd(0x0C);
 601   1      }
 602          
 603          
 604          //---------------------------------------------------------------------------------
 605          // delay routines
 606          //---------------------------------------------------------------------------------
 607          
 608          void small_delay(char d)
 609          {
 610   1              while (d--);
C51 COMPILER V8.08   SERIAL_LAB                                                            05/29/2009 13:19:48 PAGE 11  

 611   1      }
 612          
 613          
 614          void large_delay(char d)
 615          {
 616   1              while (d--)
 617   1                      small_delay(255);
 618   1      }
 619          
 620          
 621          void huge_delay(char d)
 622          {
 623   1              while (d--)
 624   1                      large_delay(255);
 625   1      }
 626          
 627          //------------------- End Of File ---------------------------------------------------

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
