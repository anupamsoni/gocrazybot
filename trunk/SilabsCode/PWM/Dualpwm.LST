C51 COMPILER V8.08   DUALPWM                                                               03/18/2009 19:57:56 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE DUALPWM
OBJECT MODULE PLACED IN Dualpwm.OBJ
COMPILER INVOKED BY: C:\SiLabs\MCU\IDEfiles\C51\BIN\C51.exe Dualpwm.c DB OE

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F02x_PCA0_Software_Timer_Blinky.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // This program uses the PCA's Software Timer Mode to periodically schedule
  10          // an interrupt.  Inside the ISR, a port pin is toggled to blink an LED on the
  11          // target board.
  12          //
  13          // In this example, PCA Module 0 is used to generate the interrupt, and the
  14          // port pin driving the LED is configured for push-pull mode.
  15          //
  16          // Pinout:
  17          //
  18          //   P1.6 - LED (push-pull)
  19          //
  20          //   all other port pins unused
  21          //
  22          //
  23          // How To Test:
  24          //
  25          // 1) Download code to a 'F02x target board with the LED jumper ON.
  26          // 2) Run the program - the LED should blink at 5 Hz.
  27          //
  28          // FID:            02X000019
  29          // Target:         C8051F02x
  30          // Tool chain:     Keil C51 8.0 / Keil EVAL C51
  31          // Command Line:   None
  32          //
  33          //
  34          // Release 1.0
  35          //    -Initial Revision (BD / TP)
  36          //    -3 AUG 2006
  37          //
  38          
  39          //-----------------------------------------------------------------------------
  40          // Includes
  41          //-----------------------------------------------------------------------------
  42          
  43          #include <C8051F020.h>                 // SFR declarations
  44          
  45          //-----------------------------------------------------------------------------
  46          // Global Constants
  47          //-----------------------------------------------------------------------------
  48          
  49          #define SYSCLK       22118400          // External oscillator frequency in Hz
  50          
  51          #define LED_FREQUENCY 22000                // Frequency to blink LED at in Hz
  52          #define T0_CLOCKS 221                  // Use 221 clocks per T0 Overflow
  53          
  54          // SYSCLK cycles per interrupt
  55          #define PCA_TIMEOUT ((SYSCLK/T0_CLOCKS)/LED_FREQUENCY/2)
C51 COMPILER V8.08   DUALPWM                                                               03/18/2009 19:57:56 PAGE 2   

  56          
  57          sbit LEFT = P1^5;                       // LED='1' means ON
  58          sbit RIGHT = P1^6;                       // LED='1' means ON
  59          sbit SW1 = P3^7;                   // SW1 ='0' means switch pressed
  60          
  61          //-----------------------------------------------------------------------------
  62          // Function Prototypes
  63          //-----------------------------------------------------------------------------
  64          
  65          void Oscillator_Init (void);
  66          void Port_Init (void);
  67          void PCA0_Init (void);
  68          
  69          //-----------------------------------------------------------------------------
  70          // Global Variables
  71          //-----------------------------------------------------------------------------
  72          
  73          unsigned int NEXT_COMPARE_VALUE;       // Next edge to be sent out in HSO mode
  74           int PWMONE =0; 
  75           int PWMTWO =0;      
  76          
  77          //-----------------------------------------------------------------------------
  78          // main() Routine
  79          //-----------------------------------------------------------------------------
  80          
  81          void main (void) {
  82   1      
  83   1              
  84   1         // Disable watchdog timer
  85   1         WDTCN = 0xde;
  86   1         WDTCN = 0xad;
  87   1      
  88   1         Port_Init ();                       // Initialize crossbar and GPIO
  89   1         Oscillator_Init ();                 // Initialize oscillator
  90   1         PCA0_Init ();                        // Initialize PCA0
  91   1      
  92   1         EA = 1;                             // Globally enable interrupts
  93   1      
  94   1              
  95   1         while (1);                          // Spin here to wait for ISR
  96   1         {
  97   2            
  98   2         }                                   // end of while(1)       
  99   1      }
 100          
 101          
 102          //-----------------------------------------------------------------------------
 103          // Initialization Subroutines
 104          //-----------------------------------------------------------------------------
 105          
 106          //-----------------------------------------------------------------------------
 107          // Oscillator_Init
 108          //-----------------------------------------------------------------------------
 109          //
 110          // Return Value : None
 111          // Parameters   : None
 112          //
 113          // This function initializes the system clock to use the external oscillator
 114          // at 22.1184 MHz.
 115          //
 116          //-----------------------------------------------------------------------------
 117          void Oscillator_Init (void)
C51 COMPILER V8.08   DUALPWM                                                               03/18/2009 19:57:56 PAGE 3   

 118          {
 119   1         unsigned int i;                     // Delay counter
 120   1      
 121   1         OSCXCN = 0x67;                      // Start external oscillator with
 122   1                                             // 22.1184 MHz crystal
 123   1      
 124   1         for (i = 0; i < 256; i++) ;         // Wait for oscillator to start
 125   1      
 126   1         while (!(OSCXCN & 0x80)) ;          // Wait for crystal osc. to settle
 127   1      
 128   1         OSCICN = 0x88;                      // Select external oscillator as SYSCLK
 129   1                                             // source and enable missing clock
 130   1                                             // detector
 131   1      }
 132          
 133          //-----------------------------------------------------------------------------
 134          // Port_Init
 135          //-----------------------------------------------------------------------------
 136          //
 137          // Return Value : None
 138          // Parameters   : None
 139          //
 140          // This function configures the crossbar and GPIO ports.
 141          //
 142          // No crossbar peripherals are used for this example.
 143          //
 144          // P1.6 is set to Push-Pull mode.
 145          //
 146          //-----------------------------------------------------------------------------
 147          void Port_Init (void)
 148          {
 149   1         XBR0 = 0x00;
 150   1         XBR1 = 0x00;
 151   1         XBR2 = 0x40;                        // No peripherals routed to pins
 152   1                                             // Enable crossbar and weak pull-ups
 153   1      
 154   1         P1MDOUT |= 0x40;                    // Set LED (P1.6) to push-pull
 155   1         P1MDOUT |= 0x20;                    // Set LED (P1.5) to push-pull
 156   1         P3MDOUT = 0x00;                     // P3.7 is open-drain
 157   1      
 158   1         P3     |= 0x80;                     // Set P3.7 latch to '1'
 159   1      }
 160          
 161          //-----------------------------------------------------------------------------
 162          // PCA0_Init
 163          //-----------------------------------------------------------------------------
 164          //
 165          // Return Value : None
 166          // Parameters   : None
 167          //
 168          // This function configures the PCA time base to use T0 Overflows as a clock
 169          // source.  Timer0 is also configured by this routine for 8-bit auto-reload
 170          // mode, where T0_CLOCKS is the number of System clocks per T0 Overflow.
 171          // The code then sets up Software Timer mode for Module 0 (CEX0 pin).
 172          //
 173          // On every interrupt from Module 0, software toggles the port I/O pin for the
 174          // LED. The frequency of the LED toggling is determined by the parameter
 175          // CEX0_FREQUENCY.
 176          //
 177          // The maximum frequency output for this example is about 50 kHz.
 178          // The minimum frequency output for this example is about 1 Hz
 179          //
C51 COMPILER V8.08   DUALPWM                                                               03/18/2009 19:57:56 PAGE 4   

 180          // The PCA time base in this example is configured to use T0 overflows, and
 181          // SYSCLK is set up for the external oscillator running at 22.1184 MHz.
 182          //
 183          // Using different PCA clock sources, different T0 reload values, or a
 184          // different processor clock will result in a different frequency for the LED
 185          // square wave, and different maximum and minimum options.
 186          //
 187          //    -------------------------------------------------------------------------
 188          //    How "Software Timer Mode" Works:
 189          //
 190          //       The PCA's Software Timer Mode works by generating an interrupt for the
 191          //    associated module every time the PCA0 register increments and the new
 192          //    16-bit PCA0 counter value matches the module's capture/compare
 193          //    register (PCA0CPn).
 194          //
 195          //    By loading the PCA0CPn register with the next match value every time a
 196          //    match happens, arbitrarily timed interrupts can be generated.
 197          //    -------------------------------------------------------------------------
 198          //
 199          // When setting the capture/compare register for the next match value, the low
 200          // byte of the PCA0CPn register (PCA0CPLn) should be written first, followed
 201          // by the high byte (PCA0CPHn).  Writing the low byte clears the ECOMn bit,
 202          // and writing the high byte will restore it.  This ensures that a match does
 203          // not occur until the full 16-bit value has been written to the compare
 204          // register.  Writing the high byte first will result in the ECOMn bit being
 205          // set to '0' after the 16-bit write, and the next match will not occur at
 206          // the correct time.
 207          //
 208          // It is best to update the capture/compare register as soon after a match
 209          // occurs as possible so that the PCA counter will not have incremented past
 210          // the next desired edge value. This code implements the compare register
 211          // update in the PCA ISR upon a match interrupt.
 212          //
 213          //-----------------------------------------------------------------------------
 214          void PCA0_Init (void)
 215          {
 216   1         unsigned short PCA_value = 0;
 217   1      
 218   1         // Configure Timer 0 for 8-bit auto-reload mode, using SYSCLK as time base
 219   1         TMOD &= 0xF0;                       // Clear all T0 control bits
 220   1         TMOD |= 0x02;                       // 8-bit auto-reload timer
 221   1         CKCON |= 0x08;                      // T0 uses SYSCLK
 222   1         TH0 = -T0_CLOCKS;                   // Set up reload value
 223   1         TL0 = -T0_CLOCKS;                   // Set up initial value
 224   1      
 225   1         // Configure PCA time base; overflow interrupt disabled
 226   1         PCA0CN = 0x00;                      // Stop counter; clear all flags
 227   1         PCA0MD = 0x04;                      // Use Timer 0 as time base
 228   1      
 229   1         PCA0CPM0 = 0x49;                    // Module 0 = Software Timer Mode,
 230   1                                             // Enable Module 0 Interrupt flag,
 231   1                                             // Enable ECOM bit
 232   1      
 233   1         PCA0L = 0x00;                       // Reset PCA Counter Value to 0x0000
 234   1         PCA0H = 0x00;
 235   1      
 236   1         PCA0CPL0 = PCA_TIMEOUT & 0x00FF;    // Set up first match
 237   1         PCA0CPH0 = (PCA_TIMEOUT & 0xFF00) >> 8;
 238   1      
 239   1         // Set up the variable for the following match
 240   1         PCA_value = PCA0CPL0;
 241   1         PCA_value |= PCA0CPH0 << 8;
C51 COMPILER V8.08   DUALPWM                                                               03/18/2009 19:57:56 PAGE 5   

 242   1      
 243   1         NEXT_COMPARE_VALUE = PCA_value + PCA_TIMEOUT;
 244   1      
 245   1         EIE1 |= 0x08;                       // Enable PCA interrupts
 246   1      
 247   1         CR = 1;                             // Start PCA
 248   1      
 249   1         TR0 = 1;                            // Start Timer 0
 250   1      }
 251          
 252          //-----------------------------------------------------------------------------
 253          // Interrupt Service Routines
 254          //-----------------------------------------------------------------------------
 255          
 256          //-----------------------------------------------------------------------------
 257          // PCA0_ISR
 258          //-----------------------------------------------------------------------------
 259          //
 260          // Return Value : None
 261          // Parameters   : None
 262          //
 263          // This is the ISR for the PCA.  It handles the case when a match occurs on
 264          // channel 0, and updates the PCA0CPn compare register with the value held in
 265          // the global variable "NEXT_COMPARE_VALUE".
 266          //
 267          //-----------------------------------------------------------------------------
 268          void PCA0_ISR (void) interrupt 9
 269          {
 270   1         unsigned short PCA_value = 0;
 271   1         
 272   1      
 273   1         if (CCF0)                           // If Module 0 caused the interrupt
 274   1         {
 275   2            CCF0 = 0;                        // Clear module 0 interrupt flag.
 276   2      
 277   2            PCA0CPL0 = (NEXT_COMPARE_VALUE & 0x00FF);
 278   2            PCA0CPH0 = (NEXT_COMPARE_VALUE & 0xFF00)>>8;
 279   2      
 280   2            if (SW1 == 0)                    // If switch depressed
 281   2            { 
 282   3             
 283   3                RIGHT = ~RIGHT;                      // Invert the pin status
 284   3                LEFT = ~LEFT;                      // Invert the pin status
 285   3            }
 286   2                else   
 287   2            {  
 288   3                      LEFT = 0;                     // Else, turn it off
 289   3                      RIGHT  = 0;
 290   3                }
 291   2                
 292   2                        
 293   2            // Set up the variable for the following edge
 294   2            PCA_value = PCA0CPL0;
 295   2            PCA_value |= PCA0CPH0 << 8;
 296   2      
 297   2            NEXT_COMPARE_VALUE = PCA_value + PCA_TIMEOUT;
 298   2         }
 299   1         else                                // Interrupt was caused by other bits.
 300   1         {
 301   2            PCA0CN &= ~0x86;                 // Clear other interrupt flags for PCA
 302   2         }
 303   1      }
C51 COMPILER V8.08   DUALPWM                                                               03/18/2009 19:57:56 PAGE 6   

 304          
 305          
 306          //-----------------------------------------------------------------------------
 307          // End Of File
 308          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    205    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
